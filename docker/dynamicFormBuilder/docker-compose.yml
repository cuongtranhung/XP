version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: xp_formbuilder_db
    environment:
      POSTGRES_USER: ${DB_USER:-formbuilder}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-formbuilder_pass}
      POSTGRES_DB: ${DB_NAME:-xp_formbuilder}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - formbuilder_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-formbuilder}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: xp_formbuilder_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_pass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - formbuilder_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Dynamic Form Builder Application
  formbuilder:
    build:
      context: ../..
      dockerfile: docker/dynamicFormBuilder/Dockerfile
    container_name: xp_formbuilder_app
    environment:
      # Database
      DATABASE_URL: postgresql://${DB_USER:-formbuilder}:${DB_PASSWORD:-formbuilder_pass}@postgres:5432/${DB_NAME:-xp_formbuilder}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379
      
      # Application
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      WS_PORT: 5001
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      
      # Frontend URL for CORS
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # File Upload
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      
      # Email (optional)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      
      # Webhook
      WEBHOOK_TIMEOUT: ${WEBHOOK_TIMEOUT:-30000}
      WEBHOOK_MAX_RETRIES: ${WEBHOOK_MAX_RETRIES:-3}
      
      # Performance
      ENABLE_CACHE: ${ENABLE_CACHE:-true}
      CACHE_TTL: ${CACHE_TTL:-3600}
      
    ports:
      - "5000:5000"  # HTTP API
      - "5001:5001"  # WebSocket
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - formbuilder_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: xp_formbuilder_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../frontend/dist:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - formbuilder
    networks:
      - formbuilder_network
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: xp_formbuilder_backup
    environment:
      PGPASSWORD: ${DB_PASSWORD:-formbuilder_pass}
    volumes:
      - ./backups:/backups
      - ./backup.sh:/backup.sh:ro
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"
    depends_on:
      - postgres
    networks:
      - formbuilder_network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: xp_formbuilder_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - formbuilder_network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: xp_formbuilder_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - formbuilder_network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  uploads:
  logs:
  prometheus_data:
  grafana_data:

networks:
  formbuilder_network:
    driver: bridge