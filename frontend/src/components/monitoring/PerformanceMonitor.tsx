// Performance Monitor Component\n// Real-time performance monitoring dashboard\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { monitoringService, PerformanceMetrics } from '../../services/monitoringService';\nimport { \n  Activity, \n  Clock, \n  Zap, \n  TrendingUp, \n  AlertTriangle, \n  CheckCircle, \n  XCircle,\n  BarChart3,\n  Monitor,\n  Wifi\n} from 'lucide-react';\nimport Button from '../common/Button';\n\n// Performance thresholds\nconst PERFORMANCE_THRESHOLDS = {\n  lcp: { good: 2500, poor: 4000 }, // Largest Contentful Paint\n  fid: { good: 100, poor: 300 },   // First Input Delay\n  cls: { good: 0.1, poor: 0.25 },  // Cumulative Layout Shift\n  fcp: { good: 1800, poor: 3000 }, // First Contentful Paint\n  ttfb: { good: 600, poor: 1500 }  // Time to First Byte\n};\n\n// Metric status enum\ntype MetricStatus = 'good' | 'needs-improvement' | 'poor' | 'unknown';\n\n// Performance metric interface\ninterface MetricDisplay {\n  name: string;\n  value: number | undefined;\n  unit: string;\n  status: MetricStatus;\n  description: string;\n  icon: React.ComponentType<any>;\n}\n\n// Network information interface\ninterface NetworkInfo {\n  effectiveType: string;\n  downlink: number;\n  rtt: number;\n}\n\nconst PerformanceMonitor: React.FC = () => {\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\n  const [networkInfo, setNetworkInfo] = useState<NetworkInfo | null>(null);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [history, setHistory] = useState<PerformanceMetrics[]>([]);\n  const [alerts, setAlerts] = useState<string[]>([]);\n\n  // Get metric status based on thresholds\n  const getMetricStatus = (metricName: string, value: number | undefined): MetricStatus => {\n    if (value === undefined) return 'unknown';\n    \n    const threshold = PERFORMANCE_THRESHOLDS[metricName as keyof typeof PERFORMANCE_THRESHOLDS];\n    if (!threshold) return 'unknown';\n    \n    if (value <= threshold.good) return 'good';\n    if (value <= threshold.poor) return 'needs-improvement';\n    return 'poor';\n  };\n\n  // Get status color class\n  const getStatusColor = (status: MetricStatus): string => {\n    switch (status) {\n      case 'good': return 'text-green-600';\n      case 'needs-improvement': return 'text-yellow-600';\n      case 'poor': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  // Get status icon\n  const getStatusIcon = (status: MetricStatus) => {\n    switch (status) {\n      case 'good': return <CheckCircle size={16} className=\"text-green-600\" />;\n      case 'needs-improvement': return <AlertTriangle size={16} className=\"text-yellow-600\" />;\n      case 'poor': return <XCircle size={16} className=\"text-red-600\" />;\n      default: return <Monitor size={16} className=\"text-gray-600\" />;\n    }\n  };\n\n  // Collect current performance metrics\n  const collectMetrics = useCallback((): PerformanceMetrics => {\n    const now = Date.now();\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const paint = performance.getEntriesByType('paint');\n    \n    // Calculate metrics from Performance API\n    const metrics: PerformanceMetrics['metrics'] = {};\n    \n    if (navigation) {\n      metrics.pageLoadTime = navigation.loadEventEnd - navigation.fetchStart;\n      metrics.renderTime = navigation.domContentLoadedEventEnd - navigation.fetchStart;\n      metrics.ttfb = navigation.responseStart - navigation.requestStart;\n    }\n    \n    // First Contentful Paint\n    const fcpEntry = paint.find(entry => entry.name === 'first-contentful-paint');\n    if (fcpEntry) {\n      metrics.fcp = fcpEntry.startTime;\n    }\n    \n    // Mock LCP (in real app, use web-vitals library)\n    if (navigation) {\n      metrics.lcp = navigation.loadEventEnd - navigation.fetchStart;\n    }\n    \n    return {\n      timestamp: now,\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      metrics,\n      context: {\n        sessionId: `session_${now}`,\n        connectionType: (navigator as any).connection?.effectiveType || 'unknown'\n      }\n    };\n  }, []);\n\n  // Collect network information\n  const collectNetworkInfo = useCallback((): NetworkInfo | null => {\n    const connection = (navigator as any).connection;\n    if (!connection) return null;\n    \n    return {\n      effectiveType: connection.effectiveType || 'unknown',\n      downlink: connection.downlink || 0,\n      rtt: connection.rtt || 0\n    };\n  }, []);\n\n  // Start monitoring\n  const startMonitoring = useCallback(() => {\n    setIsMonitoring(true);\n    \n    const collectData = () => {\n      const newMetrics = collectMetrics();\n      const newNetworkInfo = collectNetworkInfo();\n      \n      setMetrics(newMetrics);\n      setNetworkInfo(newNetworkInfo);\n      \n      // Add to history\n      setHistory(prev => {\n        const updated = [...prev, newMetrics].slice(-20); // Keep last 20 measurements\n        return updated;\n      });\n      \n      // Track with monitoring service\n      monitoringService.trackPerformance(newMetrics);\n      \n      // Check for performance alerts\n      const newAlerts: string[] = [];\n      \n      if (newMetrics.metrics.lcp && newMetrics.metrics.lcp > PERFORMANCE_THRESHOLDS.lcp.poor) {\n        newAlerts.push('LCP exceeds 4 seconds - poor user experience');\n      }\n      \n      if (newMetrics.metrics.fcp && newMetrics.metrics.fcp > PERFORMANCE_THRESHOLDS.fcp.poor) {\n        newAlerts.push('FCP exceeds 3 seconds - slow initial render');\n      }\n      \n      if (newMetrics.metrics.ttfb && newMetrics.metrics.ttfb > PERFORMANCE_THRESHOLDS.ttfb.poor) {\n        newAlerts.push('TTFB exceeds 1.5 seconds - server response is slow');\n      }\n      \n      setAlerts(newAlerts);\n    };\n    \n    // Initial collection\n    collectData();\n    \n    // Set up periodic collection\n    const intervalId = setInterval(collectData, 5000); // Every 5 seconds\n    \n    return () => clearInterval(intervalId);\n  }, [collectMetrics, collectNetworkInfo]);\n\n  // Stop monitoring\n  const stopMonitoring = useCallback(() => {\n    setIsMonitoring(false);\n  }, []);\n\n  // Clear history and alerts\n  const clearData = useCallback(() => {\n    setHistory([]);\n    setAlerts([]);\n    setMetrics(null);\n  }, []);\n\n  // Initialize monitoring on mount\n  useEffect(() => {\n    const cleanup = startMonitoring();\n    return cleanup;\n  }, [startMonitoring]);\n\n  // Prepare metrics for display\n  const displayMetrics: MetricDisplay[] = [\n    {\n      name: 'LCP',\n      value: metrics?.metrics.lcp,\n      unit: 'ms',\n      status: getMetricStatus('lcp', metrics?.metrics.lcp),\n      description: 'Largest Contentful Paint - Time for main content to load',\n      icon: TrendingUp\n    },\n    {\n      name: 'FID',\n      value: metrics?.metrics.fid,\n      unit: 'ms',\n      status: getMetricStatus('fid', metrics?.metrics.fid),\n      description: 'First Input Delay - Time until page becomes interactive',\n      icon: Zap\n    },\n    {\n      name: 'CLS',\n      value: metrics?.metrics.cls,\n      unit: '',\n      status: getMetricStatus('cls', metrics?.metrics.cls),\n      description: 'Cumulative Layout Shift - Visual stability score',\n      icon: BarChart3\n    },\n    {\n      name: 'FCP',\n      value: metrics?.metrics.fcp,\n      unit: 'ms',\n      status: getMetricStatus('fcp', metrics?.metrics.fcp),\n      description: 'First Contentful Paint - Time for first content to appear',\n      icon: Activity\n    },\n    {\n      name: 'TTFB',\n      value: metrics?.metrics.ttfb,\n      unit: 'ms',\n      status: getMetricStatus('ttfb', metrics?.metrics.ttfb),\n      description: 'Time to First Byte - Server response time',\n      icon: Clock\n    }\n  ];\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-2\">\n          <Monitor className=\"h-6 w-6 text-blue-600\" />\n          <h2 className=\"text-xl font-semibold text-gray-900\">Performance Monitor</h2>\n          {isMonitoring && (\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-green-600\">Live</span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={clearData}\n          >\n            Clear Data\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            onClick={isMonitoring ? stopMonitoring : startMonitoring}\n            variant={isMonitoring ? 'outline' : 'primary'}\n          >\n            {isMonitoring ? 'Stop' : 'Start'} Monitoring\n          </Button>\n        </div>\n      </div>\n\n      {/* Alerts */}\n      {alerts.length > 0 && (\n        <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n            <h3 className=\"font-medium text-red-800\">Performance Alerts</h3>\n          </div>\n          <ul className=\"space-y-1\">\n            {alerts.map((alert, index) => (\n              <li key={index} className=\"text-sm text-red-700\">\n                â€¢ {alert}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Core Web Vitals */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-6\">\n        {displayMetrics.map((metric) => {\n          const Icon = metric.icon;\n          return (\n            <div key={metric.name} className=\"p-4 border rounded-lg hover:shadow-sm transition-shadow\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Icon size={16} className={getStatusColor(metric.status)} />\n                  <span className=\"font-medium text-gray-900\">{metric.name}</span>\n                </div>\n                {getStatusIcon(metric.status)}\n              </div>\n              \n              <div className=\"mb-1\">\n                <span className={`text-2xl font-bold ${getStatusColor(metric.status)}`}>\n                  {metric.value !== undefined ? (\n                    metric.name === 'CLS' ? metric.value.toFixed(3) : Math.round(metric.value)\n                  ) : 'â€”'}\n                </span>\n                {metric.unit && (\n                  <span className=\"text-sm text-gray-500 ml-1\">{metric.unit}</span>\n                )}\n              </div>\n              \n              <p className=\"text-xs text-gray-600\">{metric.description}</p>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Network Information */}\n      {networkInfo && (\n        <div className=\"mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Wifi className=\"h-5 w-5 text-blue-600\" />\n            <h3 className=\"font-medium text-blue-800\">Network Information</h3>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n            <div>\n              <span className=\"font-medium text-blue-700\">Connection Type:</span>\n              <span className=\"ml-2 text-blue-800\">{networkInfo.effectiveType.toUpperCase()}</span>\n            </div>\n            <div>\n              <span className=\"font-medium text-blue-700\">Downlink:</span>\n              <span className=\"ml-2 text-blue-800\">{networkInfo.downlink} Mbps</span>\n            </div>\n            <div>\n              <span className=\"font-medium text-blue-700\">RTT:</span>\n              <span className=\"ml-2 text-blue-800\">{networkInfo.rtt} ms</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Performance History */}\n      {history.length > 0 && (\n        <div className=\"border-t pt-6\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Performance History</h3>\n          <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n            {history.slice().reverse().map((entry, index) => (\n              <div key={entry.timestamp} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg text-sm\">\n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"text-gray-500 font-mono\">\n                    {new Date(entry.timestamp).toLocaleTimeString()}\n                  </span>\n                  <span className=\"text-gray-600\">\n                    {entry.url.replace(window.location.origin, '')}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-3 text-xs\">\n                  {entry.metrics.lcp && (\n                    <span className={`${getStatusColor(getMetricStatus('lcp', entry.metrics.lcp))}`}>\n                      LCP: {Math.round(entry.metrics.lcp)}ms\n                    </span>\n                  )}\n                  {entry.metrics.fcp && (\n                    <span className={`${getStatusColor(getMetricStatus('fcp', entry.metrics.fcp))}`}>\n                      FCP: {Math.round(entry.metrics.fcp)}ms\n                    </span>\n                  )}\n                  {entry.metrics.ttfb && (\n                    <span className={`${getStatusColor(getMetricStatus('ttfb', entry.metrics.ttfb))}`}>\n                      TTFB: {Math.round(entry.metrics.ttfb)}ms\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PerformanceMonitor;"