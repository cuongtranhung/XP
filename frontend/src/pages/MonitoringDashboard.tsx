// Monitoring Dashboard Page\n// Comprehensive monitoring and observability dashboard\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Activity, \n  AlertTriangle, \n  BarChart3, \n  Bug, \n  Clock, \n  Eye, \n  Monitor, \n  Shield, \n  Zap,\n  TrendingUp,\n  Settings,\n  Download,\n  RefreshCw\n} from 'lucide-react';\nimport { monitoringService } from '../services/monitoringService';\nimport { monitoringFeatures } from '../config/monitoring';\nimport PerformanceMonitor from '../components/monitoring/PerformanceMonitor';\nimport EnhancedErrorBoundary from '../components/monitoring/ErrorBoundary';\nimport Button from '../components/common/Button';\nimport { useMonitoring } from '../hooks/useMonitoring';\n\n// Dashboard tabs\ntype DashboardTab = 'overview' | 'performance' | 'errors' | 'sessions' | 'alerts' | 'settings';\n\n// Mock data interfaces\ninterface SystemHealth {\n  status: 'healthy' | 'warning' | 'critical';\n  uptime: number;\n  errorRate: number;\n  responseTime: number;\n  lastUpdate: number;\n}\n\ninterface ErrorSummary {\n  total: number;\n  new: number;\n  resolved: number;\n  categories: Record<string, number>;\n}\n\nconst MonitoringDashboard: React.FC = () => {\n  const [activeTab, setActiveTab] = useState<DashboardTab>('overview');\n  const [systemHealth, setSystemHealth] = useState<SystemHealth>({\n    status: 'healthy',\n    uptime: 99.8,\n    errorRate: 0.02,\n    responseTime: 145,\n    lastUpdate: Date.now()\n  });\n  const [errorSummary, setErrorSummary] = useState<ErrorSummary>({\n    total: 23,\n    new: 5,\n    resolved: 18,\n    categories: {\n      'javascript': 12,\n      'api': 8,\n      'network': 3\n    }\n  });\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sessionRecordingEnabled, setSessionRecordingEnabled] = useState(monitoringFeatures.SESSION_RECORDING_ENABLED);\n\n  // Use monitoring hook\n  const { captureError, trackAction, addBreadcrumb } = useMonitoring({\n    componentName: 'MonitoringDashboard',\n    trackPerformance: true\n  });\n\n  // Initialize monitoring\n  useEffect(() => {\n    const initializeMonitoring = async () => {\n      try {\n        await monitoringService.initialize();\n        addBreadcrumb('Monitoring dashboard initialized', 'navigation');\n      } catch (error) {\n        captureError(error as Error, { context: 'initialization' });\n      }\n    };\n\n    initializeMonitoring();\n  }, [captureError, addBreadcrumb]);\n\n  // Refresh data\n  const refreshData = async () => {\n    setIsRefreshing(true);\n    trackAction('dashboard_refresh');\n\n    try {\n      // Simulate data refresh\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Update system health with mock data\n      setSystemHealth(prev => ({\n        ...prev,\n        lastUpdate: Date.now(),\n        responseTime: Math.floor(Math.random() * 100) + 100,\n        errorRate: Math.random() * 0.1\n      }));\n      \n      addBreadcrumb('Dashboard data refreshed', 'user_action');\n    } catch (error) {\n      captureError(error as Error, { context: 'data_refresh' });\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  // Export monitoring data\n  const exportData = () => {\n    trackAction('export_monitoring_data');\n    \n    const data = {\n      systemHealth,\n      errorSummary,\n      timestamp: new Date().toISOString(),\n      features: monitoringFeatures\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `monitoring-data-${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // Get status color\n  const getStatusColor = (status: SystemHealth['status']) => {\n    switch (status) {\n      case 'healthy': return 'text-green-600 bg-green-100';\n      case 'warning': return 'text-yellow-600 bg-yellow-100';\n      case 'critical': return 'text-red-600 bg-red-100';\n    }\n  };\n\n  // Tab configuration\n  const tabs = [\n    { key: 'overview', label: 'Overview', icon: Monitor },\n    { key: 'performance', label: 'Performance', icon: Zap },\n    { key: 'errors', label: 'Errors', icon: Bug },\n    { key: 'sessions', label: 'Sessions', icon: Eye },\n    { key: 'alerts', label: 'Alerts', icon: AlertTriangle },\n    { key: 'settings', label: 'Settings', icon: Settings }\n  ] as const;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n              <Activity className=\"mr-3 h-8 w-8 text-blue-600\" />\n              Monitoring Dashboard\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              Real-time application monitoring and observability\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={exportData}\n              className=\"flex items-center\"\n            >\n              <Download size={16} className=\"mr-2\" />\n              Export Data\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={refreshData}\n              disabled={isRefreshing}\n              className=\"flex items-center\"\n            >\n              <RefreshCw size={16} className={`mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        {/* System Status Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">System Status</p>\n                <div className=\"flex items-center mt-1\">\n                  <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(systemHealth.status)}`}>\n                    {systemHealth.status.charAt(0).toUpperCase() + systemHealth.status.slice(1)}\n                  </span>\n                </div>\n              </div>\n              <Shield className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Uptime</p>\n                <p className=\"text-2xl font-bold text-gray-900 mt-1\">{systemHealth.uptime}%</p>\n                <p className=\"text-xs text-gray-500\">Last 30 days</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Error Rate</p>\n                <p className=\"text-2xl font-bold text-gray-900 mt-1\">{(systemHealth.errorRate * 100).toFixed(2)}%</p>\n                <p className=\"text-xs text-gray-500\">Last 24 hours</p>\n              </div>\n              <Bug className=\"h-8 w-8 text-red-600\" />\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Avg Response Time</p>\n                <p className=\"text-2xl font-bold text-gray-900 mt-1\">{systemHealth.responseTime}ms</p>\n                <p className=\"text-xs text-gray-500\">API endpoints</p>\n              </div>\n              <Clock className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"bg-white rounded-lg shadow-sm border mb-8\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"-mb-px flex space-x-8 px-6\">\n              {tabs.map(tab => {\n                const Icon = tab.icon;\n                return (\n                  <button\n                    key={tab.key}\n                    onClick={() => {\n                      setActiveTab(tab.key as DashboardTab);\n                      trackAction('tab_change', { tab: tab.key });\n                    }}\n                    className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm ${\n                      activeTab === tab.key\n                        ? 'border-blue-500 text-blue-600'\n                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    }`}\n                  >\n                    <Icon size={16} className=\"mr-2\" />\n                    {tab.label}\n                  </button>\n                );\n              })}\n            </nav>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"p-6\">\n            <EnhancedErrorBoundary level=\"feature\" context={{ tab: activeTab }}>\n              {activeTab === 'overview' && (\n                <div className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    {/* Error Summary */}\n                    <div className=\"bg-gray-50 rounded-lg p-6\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Error Summary</h3>\n                      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-gray-900\">{errorSummary.total}</p>\n                          <p className=\"text-sm text-gray-600\">Total</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-red-600\">{errorSummary.new}</p>\n                          <p className=\"text-sm text-gray-600\">New</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-green-600\">{errorSummary.resolved}</p>\n                          <p className=\"text-sm text-gray-600\">Resolved</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        {Object.entries(errorSummary.categories).map(([category, count]) => (\n                          <div key={category} className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-700 capitalize\">{category}</span>\n                            <span className=\"text-sm font-medium text-gray-900\">{count}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Monitoring Features */}\n                    <div className=\"bg-gray-50 rounded-lg p-6\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Monitoring Features</h3>\n                      <div className=\"space-y-3\">\n                        {Object.entries(monitoringFeatures).map(([feature, enabled]) => (\n                          <div key={feature} className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-700\">\n                              {feature.replace(/_/g, ' ').toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase())}\n                            </span>\n                            <div className={`px-2 py-1 text-xs font-medium rounded-full ${\n                              enabled ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'\n                            }`}>\n                              {enabled ? 'Enabled' : 'Disabled'}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'performance' && (\n                <PerformanceMonitor />\n              )}\n\n              {activeTab === 'errors' && (\n                <div className=\"text-center py-12\">\n                  <Bug className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Error Tracking</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Error tracking and analysis will be displayed here.\n                  </p>\n                  <Button onClick={() => captureError(new Error('Test error for dashboard'), { context: 'manual_test' })}>\n                    Generate Test Error\n                  </Button>\n                </div>\n              )}\n\n              {activeTab === 'sessions' && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Session Recording</h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm text-gray-600\">Session Recording</span>\n                      <button\n                        onClick={() => {\n                          setSessionRecordingEnabled(!sessionRecordingEnabled);\n                          trackAction('toggle_session_recording', { enabled: !sessionRecordingEnabled });\n                        }}\n                        className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                          sessionRecordingEnabled ? 'bg-blue-600' : 'bg-gray-200'\n                        }`}\n                      >\n                        <span\n                          className={`pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition duration-200 ease-in-out ${\n                            sessionRecordingEnabled ? 'translate-x-5' : 'translate-x-0'\n                          }`}\n                        />\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-center py-12\">\n                    <Eye className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Session Recordings</h3>\n                    <p className=\"text-gray-600\">\n                      {sessionRecordingEnabled \n                        ? 'Session recording is enabled. User sessions will be recorded for analysis.'\n                        : 'Session recording is disabled. Enable it to start recording user sessions.'\n                      }\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'alerts' && (\n                <div className=\"text-center py-12\">\n                  <AlertTriangle className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Alert Management</h3>\n                  <p className=\"text-gray-600\">\n                    Configure alerts and notifications for monitoring events.\n                  </p>\n                </div>\n              )}\n\n              {activeTab === 'settings' && (\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Monitoring Settings</h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"bg-gray-50 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-gray-900 mb-3\">Error Tracking</h4>\n                      <div className=\"space-y-2 text-sm text-gray-600\">\n                        <p>• Automatic error capture: Enabled</p>\n                        <p>• Console error tracking: Enabled</p>\n                        <p>• Unhandled promise rejection: Enabled</p>\n                        <p>• Max breadcrumbs: 50</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-gray-50 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-gray-900 mb-3\">Performance Monitoring</h4>\n                      <div className=\"space-y-2 text-sm text-gray-600\">\n                        <p>• Web Vitals tracking: Enabled</p>\n                        <p>• Custom timing: Enabled</p>\n                        <p>• Navigation timing: Enabled</p>\n                        <p>• Sample rate: {process.env.NODE_ENV === 'development' ? '100%' : '20%'}</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"pt-4 border-t border-gray-200\">\n                    <h4 className=\"font-medium text-gray-900 mb-3\">Environment Information</h4>\n                    <div className=\"bg-gray-50 rounded-lg p-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <span className=\"font-medium text-gray-700\">Environment:</span>\n                          <span className=\"ml-2 text-gray-900\">{process.env.NODE_ENV || 'development'}</span>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-700\">Version:</span>\n                          <span className=\"ml-2 text-gray-900\">{process.env.REACT_APP_VERSION || '1.0.0'}</span>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-700\">Last Updated:</span>\n                          <span className=\"ml-2 text-gray-900\">\n                            {new Date(systemHealth.lastUpdate).toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </EnhancedErrorBoundary>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MonitoringDashboard;"