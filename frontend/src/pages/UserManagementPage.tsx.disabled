import React, { useState, useEffect } from 'react';
import { toast } from 'react-hot-toast';
import { UserManagement, UserManagementFilters } from '../types/user-management';
import userManagementService from '../services/userManagementService';
import UserManagementTable from '../components/user-management/UserManagementTable';
import UserManagementFiltersComponent from '../components/user-management/UserManagementFilters';
import UserDetailModal from '../components/user-management/UserDetailModal';
import { Button } from '../components/common/Button';
import { LoadingSpinner } from '../components/common/LoadingSpinner';

const UserManagementPage: React.FC = () => {
  const [filters, setFilters] = useState<UserManagementFilters>({});
  const [selectedUser, setSelectedUser] = useState<UserManagement | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [healthStatus, setHealthStatus] = useState<{
    status: string;
    module: string;
    timestamp: string;
  } | null>(null);
  const [healthLoading, setHealthLoading] = useState(true);
  const [tableKey, setTableKey] = useState(0); // For forcing table refresh

  // Check health status on mount
  useEffect(() => {
    checkHealthStatus();
  }, []);

  const checkHealthStatus = async () => {
    try {
      setHealthLoading(true);
      const health = await userManagementService.getHealth();
      setHealthStatus(health);
    } catch (error) {
      console.error('Health check failed:', error);
      toast.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi User Management API');
    } finally {
      setHealthLoading(false);
    }
  };

  const handleFiltersChange = (newFilters: UserManagementFilters) => {
    setFilters(newFilters);
  };

  const handleFiltersReset = () => {
    setFilters({});
  };

  const handleUserSelect = (user: UserManagement) => {
    setSelectedUser(user);
    setIsModalOpen(true);
  };

  const handleModalClose = () => {
    setIsModalOpen(false);
    setSelectedUser(null);
  };

  const handleUserUpdated = (updatedUser: UserManagement) => {
    // Force table refresh by incrementing key
    setTableKey(prev => prev + 1);
    toast.success('Th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
  };

  return (
    <div className="min-h-screen bg-gray-50 py-6">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h1>
              <p className="mt-2 text-sm text-gray-600">
                Qu·∫£n l√Ω th√¥ng tin ng∆∞·ªùi d√πng, ph√™ duy·ªát t√†i kho·∫£n v√† ph√¢n quy·ªÅn
              </p>
            </div>
            
            {/* Health Status */}
            <div className="flex items-center space-x-2">
              {healthLoading ? (
                <div className="flex items-center text-yellow-600">
                  <LoadingSpinner size="xs" />
                  <span className="ml-2 text-sm">ƒêang ki·ªÉm tra...</span>
                </div>
              ) : healthStatus ? (
                <div className="flex items-center text-green-600">
                  <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="ml-2 text-sm font-medium">
                    {healthStatus.module} - {healthStatus.status}
                  </span>
                </div>
              ) : (
                <div className="flex items-center text-red-600">
                  <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                  <span className="ml-2 text-sm font-medium">Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c</span>
                </div>
              )}
              
              <Button
                size="sm"
                variant="outline"
                onClick={checkHealthStatus}
                disabled={healthLoading}
              >
                üîÑ Ki·ªÉm tra
              </Button>
            </div>
          </div>
        </div>

        {/* Filters */}
        <UserManagementFiltersComponent
          filters={filters}
          onFiltersChange={handleFiltersChange}
          onReset={handleFiltersReset}
        />

        {/* Table */}
        <UserManagementTable
          key={tableKey} // Force re-render when updated
          filters={filters}
          onUserSelect={handleUserSelect}
        />

        {/* User Detail Modal */}
        <UserDetailModal
          user={selectedUser}
          isOpen={isModalOpen}
          onClose={handleModalClose}
          onUserUpdated={handleUserUpdated}
        />

        {/* Quick Actions Panel */}
        <div className="fixed bottom-6 right-6">
          <div className="bg-white rounded-lg shadow-lg p-4 space-y-2">
            <div className="text-xs text-gray-500 font-medium">Thao t√°c nhanh</div>
            
            <Button
              size="sm"
              variant="outline"
              className="w-full justify-start"
              onClick={() => {
                // Force table refresh
                setTableKey(prev => prev + 1);
                toast.success('ƒê√£ l√†m m·ªõi d·ªØ li·ªáu');
              }}
            >
              üîÑ L√†m m·ªõi d·ªØ li·ªáu
            </Button>
            
            <Button
              size="sm"
              variant="outline"
              className="w-full justify-start"
              onClick={() => {
                // Reset all filters
                handleFiltersReset();
                toast.success('ƒê√£ ƒë·∫∑t l·∫°i b·ªô l·ªçc');
              }}
            >
              üßπ X√≥a b·ªô l·ªçc
            </Button>
            
            <Button
              size="sm"
              variant="outline"
              className="w-full justify-start"
              onClick={checkHealthStatus}
            >
              ‚ù§Ô∏è Ki·ªÉm tra k·∫øt n·ªëi
            </Button>
            
            <Button
              size="sm"
              variant="outline"
              className="w-full justify-start"
              onClick={() => {
                toast.info('T√≠nh nƒÉng xu·∫•t b√°o c√°o s·∫Ω ƒë∆∞·ª£c th√™m sau');
              }}
            >
              üìä Xu·∫•t b√°o c√°o
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserManagementPage;